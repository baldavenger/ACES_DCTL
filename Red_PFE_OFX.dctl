// REDWideGamutRGB Log3G10 Print Film Emulation OFX DCTL
// Requires ACES_DCTL set

DEFINE_UI_PARAMS(Exposure, Exposure, DCTLUI_SLIDER_FLOAT, 0, -3, 3, 0.001)
DEFINE_UI_PARAMS(Sat, Saturation, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(peak, Peak, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(curve, Contrast, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(pivot, Pivot, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(offset, Offset, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(softClip, Sat Softclip, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(PFE, Enable PFE, DCTLUI_CHECK_BOX, 1)

#include "ACES_LIB/ACES_IDT.h"
#include "ACES_LIB/ACES_LMT.h"

__CONSTANT__ float e = 2.718281828459045f;
__CONSTANT__ float AP0_Rec709[9] = {2.52161f, -1.13407f, -0.387538f, -0.276482f, 1.37272f, -0.0962352f, -0.0153831f, -0.152991f, 1.16837f};

__DEVICE__ float3 Sigmoid( float3 In, float peak, float curve, float pivot, float offset)
{
float3 out;
pivot = 0.435f - pivot/10;
out.x = peak / (1.0f + _powf(e, (-8.9f * curve) * (In.x - pivot))) + offset;
out.y = peak / (1.0f + _powf(e, (-8.9f * curve) * (In.y - pivot))) + offset;
out.z = peak / (1.0f + _powf(e, (-8.9f * curve) * (In.z - pivot))) + offset;
return out;
}

__DEVICE__ float log3G10( float x)
{
const float a = 0.224282f;
const float b = 155.975327f;
const float c = 0.01f;
const float g = 15.1927f;
x = x + c;
if (x < 0) {
return x*g;
}
float output = a * _log10f((x * b) + 1);
return output;
}

__DEVICE__ float Sat_Soft_Clip( float S, float softclip)
{
softclip *= 0.3f;
return S > softclip ? (-1.0f / ((S - softclip) / (1.0f - softclip) + 1.0f) + 1.0f) * (1.0f - softclip) + softclip : S;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{ 

float3 aces = make_float3(p_R, p_G, p_B);
aces = IDT_REDWideGamutRGB_Log3G10(aces);

float Saturation = Sat;

if(Exposure != 0.0f) 
aces = aces * _exp2f(Exposure);

if(PFE) Saturation = 0.7f * Sat;
aces = scale_C( aces, Saturation);

float3 SLOPE = make_float3(1.0f, 1.0f, 0.94f);
float3 OFFSET = make_float3(0.0f, 0.0f, 0.02f);
float3 POWER = make_float3(1.0f, 1.0f, 1.0f);

if(PFE){
aces = ASCCDL_inACEScct( aces, SLOPE, OFFSET, POWER);
aces = gamma_adjust_linear( aces, 1.5f, 0.18f);
aces = rotate_H_in_H( aces, 0.0f, 30.0f, 5.0f);
aces = rotate_H_in_H( aces, 80.0f, 60.0f, -15.0f);
aces = rotate_H_in_H( aces, 52.0f, 50.0f, -14.0f);
aces = scale_C_at_H( aces, 45.0f, 40.0f, 1.4f);
aces = rotate_H_in_H( aces, 190.0f, 40.0f, 30.0f);
aces = scale_C_at_H( aces, 240.0f, 120.0f, 1.4f);
}

float3 RGB;
RGB.x = aces.x * AP0_Rec709[0] + aces.y * AP0_Rec709[1] + aces.z * AP0_Rec709[2]; 
RGB.y = aces.x * AP0_Rec709[3] + aces.y * AP0_Rec709[4] + aces.z * AP0_Rec709[5]; 
RGB.z = aces.x * AP0_Rec709[6] + aces.y * AP0_Rec709[7] + aces.z * AP0_Rec709[8];

RGB.x = log3G10(RGB.x);
RGB.y = log3G10(RGB.y);
RGB.z = log3G10(RGB.z);

RGB = Sigmoid( RGB, peak * 1.2f, curve, pivot, offset);

if (softClip > 0){
RGB = rgb_2_ych(RGB);
RGB.y = Sat_Soft_Clip( RGB.y, 1 - softClip);
RGB = ych_2_rgb(RGB);
}

return RGB;
}